using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Net;
using Newtonsoft.Json;

namespace KowWhoisApi.Models
{
	[Table("address")]
	public class Address
	{
		[Column("id")]
		public uint Id { get; set; }

		[Column("ip_raw")]
		[MaxLength(16)]
		[Required]
		public byte[] IpRaw { get; set; }

		[Column("ip")]
		public string Ip { get; set; }

		// Unmapped property, to make my life easier when handling results
		// from ns lookups. There is no reason to actually keep this object.
		[NotMapped]
		[JsonIgnore]
		public IPAddress IPAddress
		{
			// get - just creates a new IPAddress from scratch, given the the
			//       IP bytes. Added to just not return a null object.
			get { return new IPAddress(IpRaw); }

			// set - keeps the only information saved in the database, the raw
			//       IP bytes. (IP string is being generated by the database.)
			set
			{
				IpRaw = value.GetAddressBytes();
				Ip = value.ToString();
			}
		}

		[Column("created_at", TypeName = "TIMESTAMP")]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		public DateTime CreatedAt { get; set; }

		[Column("updated_at", TypeName = "TIMESTAMP")]
		[DatabaseGenerated(DatabaseGeneratedOption.Computed)]
		public DateTime UpdatedAt { get; set; }

		public ICollection<NameServer> NameServers { get; set; }
		[JsonIgnore]
		public virtual ICollection<NameServerAddress> NameServerAddresses { get; set; }

		public ICollection<Domain> Domains { get; set; }
		[JsonIgnore]
		public virtual ICollection<DomainAddress> DomainAddresses { get; set; }

		public Address()
		{
			NameServers = new List<NameServer>();
			NameServerAddresses = new List<NameServerAddress>();

			Domains = new List<Domain>();
			DomainAddresses = new List<DomainAddress>();
		}

		public Address(IPAddress ipaddress)
		{
			NameServers = new List<NameServer>();
			NameServerAddresses = new List<NameServerAddress>();

			Domains = new List<Domain>();
			DomainAddresses = new List<DomainAddress>();

			IPAddress = ipaddress;
		}
	}
}
